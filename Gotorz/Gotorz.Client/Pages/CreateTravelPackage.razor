@page "/CreateTravelPackage"
@rendermode InteractiveAuto
@using Gotorz.Client.Models
@using Gotorz.Client.Services
@using System.Globalization
@inject TravelPackageState TravelPackageState
@inject NavigationManager NavigationManager
@inject TravelPackageService TravelPackageService
<!-- Flow -->
<!-- Bruger udfylder form  -->
<!-- Trykker på Create Package -->
<!-- CreatePackageAsync kalder API og gemmer pakken i databasen -->
<!-- Efter succes hentes opdateret liste fra API -->
<!-- UI opdateres og viser den nyeste liste med pakker -->



<h3>Pakkerejse-vindue</h3>




@code {
    private string TripTitle { get; set; } = "";
    private string Description { get; set; } = "";
    private string SearchTerm { get; set; } = "";
    private List<TravelPackage> CreatedPackages { get; set; } = new();
    private TravelPackage? SelectedPackage { get; set; }
    private bool IsEditing => SelectedPackage != null;
    private decimal ProfitPercentage { get; set; } = 10;

    // Filtrer pakker baseret på søgeterm
    private IEnumerable<TravelPackage> FilteredPackages
    {
        get
        {
            if (string.IsNullOrWhiteSpace(SearchTerm))
            {
                return CreatedPackages;
            }

            return CreatedPackages.Where(pkg =>
                pkg.TripTitle.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                pkg.Description.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase));
        }
    }

    private decimal CalculateTotalPrice()
    {
        decimal outboundPrice = TravelPackageState.SelectedFlight?.Outbound.Price != null
            ? Convert.ToDecimal(TravelPackageState.SelectedFlight.Outbound.Price)
            : 0m;

        decimal inboundPrice = TravelPackageState.SelectedFlight?.Inbound.Price != null
            ? Convert.ToDecimal(TravelPackageState.SelectedFlight.Inbound.Price)
            : 0m;

        decimal hotelPricePerNight = TravelPackageState.SelectedHotel?.pricePerNight != null
            ? Convert.ToDecimal(TravelPackageState.SelectedHotel.pricePerNight)
            : 0m;

        return outboundPrice + inboundPrice + hotelPricePerNight;
    }

    private decimal CalculateTotalPriceWithProfit()
    {
        decimal totalPrice = CalculateTotalPrice();
        decimal profit = totalPrice * (ProfitPercentage / 100);
        return totalPrice + profit;
    }

    private async Task CreatePackageAsync()
    {
        if (TravelPackageState.SelectedFlight == null || TravelPackageState.SelectedHotel == null || CalculateTotalPrice() <= 0)
        {
            Console.WriteLine("Fejl: Fly, hotel eller pris er ikke valgt.");
            return;
        }

        var newPackage = new TravelPackage
            {
                TripTitle = TripTitle,
                PictureUrl = TravelPackageState.SelectedHotel?.PictureUrl,
                Flight = TravelPackageState.SelectedFlight,
                Hotel = TravelPackageState.SelectedHotel,
                Description = Description,
                TripTotalPrice = CalculateTotalPriceWithProfit()
            };

        try
        {
            // Gem pakken i databasen via API
            await TravelPackageService.SaveTravelPackageAsync(newPackage);

            // Hent alle pakker igen for at opdatere UI (inkl. den nye)
            CreatedPackages = await TravelPackageService.GetAllTravelPackagesAsync();

            // Opdater også PublishedPackages i state hvis nødvendigt
            TravelPackageState.PublishedPackages = CreatedPackages;

            Console.WriteLine($"Pakken '{newPackage.TripTitle}' er gemt og hentet fra databasen.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl ved gemning: {ex.Message}");
        }

        ClearForm();
    }




    private void SelectPackage(TravelPackage package)
    {
        SelectedPackage = package;
        TripTitle = package.TripTitle;
        Description = package.Description;
        TravelPackageState.SelectedFlight = package.Flight;
        TravelPackageState.SelectedHotel = package.Hotel;
    }

    private void SaveEditedPackage()
    {
        if (SelectedPackage != null)
        {
            SelectedPackage.TripTitle = TripTitle;
            SelectedPackage.Description = Description;
            SelectedPackage.Flight = TravelPackageState.SelectedFlight;
            SelectedPackage.Hotel = TravelPackageState.SelectedHotel;
            SelectedPackage.TripTotalPrice = CalculateTotalPriceWithProfit();
            ClearForm();
        }
    }

    private void DeleteSelectedPackage()
    {
        if (SelectedPackage != null)
        {
            CreatedPackages.Remove(SelectedPackage);
            ClearForm();
        }
    }

    private void ClearForm()
    {
        TripTitle = "";
        Description = "";
        TravelPackageState.SelectedFlight = null;
        TravelPackageState.SelectedHotel = null;
        TravelPackageState.FlightSearchResults = null;
        TravelPackageState.AccommodationSearchResults = null;
        SelectedPackage = null;
        ProfitPercentage = 10; // Tilbage til default
    }

    private bool IsCreateButtonDisabled()
    {
        // Hvis der ikke er valgt fly eller hotel, eller hvis totalprisen er 0 eller mindre, deaktiver knappen
        return TravelPackageState.SelectedFlight == null || TravelPackageState.SelectedHotel == null || CalculateTotalPrice() <= 0;
    }

    private void AddToWeb()
    {
        if (SelectedPackage != null)
        {
            if (!TravelPackageState.PublishedPackages.Contains(SelectedPackage))
            {
                TravelPackageState.PublishedPackages.Add(SelectedPackage);
            }
            Console.WriteLine($"Pakken '{SelectedPackage.TripTitle}' er tilføjet til websiden.");
        }
    }



    private async Task DeleteFromWeb()
    {
        if (SelectedPackage != null)
        {
            // Fjern pakken fra websiden (kan være en backend-sletning eller noget lokalt)
            Console.WriteLine($"Pakken {SelectedPackage.TripTitle} er blevet fjernet fra websiden.");
            // Implementér her eventuelt en kald til backend API for at slette pakken permanent fra databasen
            // For eksempel: await _packageService.DeletePackageAsync(SelectedPackage.Id);
            CreatedPackages.Remove(SelectedPackage);
            ClearForm();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CreatedPackages = await TravelPackageService.GetAllTravelPackagesAsync();
            TravelPackageState.PublishedPackages = CreatedPackages;
        }
        catch (Exception ex)
        {
            // Håndter fejlen, fx log den eller vis besked til bruger
            CreatedPackages = new List<TravelPackage>();
            TravelPackageState.PublishedPackages = CreatedPackages;
            Console.Error.WriteLine($"Fejl ved hentning af pakker: {ex.Message}");
        }
    }




}

<style>
    .travel-package-window {
        display: flex;
        gap: 20px;
    }

    .side-panel {
        width: 200px;
        display: flex;
        flex-direction: column;
        gap: 10px;
        padding: 10px;
        border: 1px solid #ccc;
    }

    .icon-row {
        display: flex;
        justify-content: space-around;
        margin-bottom: 10px;
    }

    .icon {
        width: 24px;
        height: 24px;
    }

    .action-button {
        padding: 8px;
        background-color: #007bff;
        color: white;
        border: 1px solid #007bff;
        cursor: pointer;
        border-radius: 5px;
    }

        .action-button:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

    .main-panel {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .info-row {
        display: flex;
        gap: 10px;
    }

    .info-box {
        flex: 1;
        padding: 10px;
        border: 1px solid #bbb;
        background-color: #fdfdfd;
    }

    .profit-box {
        width: 200px;
        padding: 10px;
        border: 1px solid #bbb;
        background-color: #f9f9f9;
        margin-top: 20px;
    }

        .profit-box input {
            width: 100%;
            padding: 8px;
        }

    .total-price-box {
        width: 200px;
        padding: 10px;
        border: 1px solid #bbb;
        background-color: #f2f2f2;
    }

    .package-collection {
        margin-top: 30px;
        display: flex;
        flex-direction: column;
        gap: 20px; /* Add spacing between elements */
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 6px;
    }

    .package-header {
        margin-top: 20px;
        display: flex;
        justify-content: flex-start;
        font-size: 25px;
        font-weight: bold;
    }

    .package-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 10px;
    }

    .package-card {
        border: 1px solid #007bff;
        padding: 10px;
        border-radius: 6px;
        background-color: #fefefe;
        cursor: pointer;
    }

        .package-card:hover {
            background-color: #e8f5ff;
        }

    .search-container {
        display: flex;
        flex-direction: column;
        gap: 10px;
        width: 250px;
    }

    .search-input {
        width: 100%;
        padding: 8px;
    }

    .add-to-web {
        width: 100%;
        padding: 8px;
        background-color: #007bff;
        color: white;
        border: none;
        cursor: pointer;
        font-size: 14px;
        border-radius: 4px;
    }

        .add-to-web:hover {
            background-color: #0056b3;
        }

    .error-message {
        margin-top: 10px;
        font-size: 14px;
        color: red;
    }
</style>

