@inject IJSRuntime jsr
@rendermode @(new InteractiveAutoRenderMode(prerender: false))

<p>
	@if (string.IsNullOrEmpty(username))
	{
		<span><a href="/register">Register</a> <a href="/login">Login</a></span>
	}
	else
	{
		<span>Hello, @username @userRole <a href="/logout">(Logout)</a></span>
	}
</p>

@code {
	private string username = string.Empty;
	private string userRole = string.Empty;
	private System.Threading.Timer? timer;
	private bool _disposed;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		timer = new System.Threading.Timer(async (object? stateInfo) =>
		{
			try
			{
				if (_disposed) return; // 👈 Stop hvis vi er disposed!

				var userdata = await jsr.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false) ?? string.Empty;
				var temp = userdata.Split(';', 2)[0];
				if (temp != username)
				{
					username = temp;
					await InvokeAsync(StateHasChanged); // 👈 Korrekt måde at kalde StateHasChanged fra en anden tråd
				}
				var temp2 = userdata.Split(';', 2)[1];
				if (temp != userRole)
				{
					userRole = temp;
					await InvokeAsync(StateHasChanged); // 👈 Korrekt måde at kalde StateHasChanged fra en anden tråd
				}
			}
			catch (JSDisconnectedException)
			{
				// Circuit er død - gør ingenting
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Timer error: {ex.Message}");
			}
		}, null, 333, 333);
	}

	public void Dispose()
	{
		_disposed = true;
		timer?.Dispose();
	}
}
